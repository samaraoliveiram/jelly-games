name: Build and Test Elixir Server

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        elixir: ["1.14.1"]
        otp: ["25.0.3"]
        node-version: ["16.8.0"]

    services:
      db:
        image: postgres:latest
        env:
          POSTGRES_DB: server_test
          POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir }}
          otp-version: ${{ matrix.otp }}

      - name: Get deps cache
        uses: actions/cache@v2
        with:
          path: deps/
          key: >-
            deps-${{ runner.os }}-${{ matrix.otp }}-
            ${{ matrix.elixir }}-${{ hashFiles('**/mix.lock') }}

      - name: Get build cache
        uses: actions/cache@v2
        with:
          path: _build/test/
          key: >-
            build-${{ runner.os }}-${{ matrix.otp }}-
            ${{ matrix.elixir }}-${{ hashFiles('**/mix.lock') }}

      - name: Clean to rule out incremental build as a source of flakiness
        if: github.run_attempt != '1'
        run: |
          mix deps.clean --all
          mix clean
        shell: sh

      - name: Install Dependencies
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get
          mix deps.compile

      - name: Restore PLT cache
        uses: actions/cache@v2
        id: plt_cache
        with:
          key: |
            ${{ runner.os }}-${{ matrix.elixir }}-${{ matrix.otp }}-plt
          restore-keys: |
            ${{ runner.os }}-${{ matrix.elixir }}-${{ matrix.otp }}-plt
          path: |
            priv/plts

      - name: Create PLTs
        if: steps.plt_cache.outputs.cache-hit != 'true'
        run: mix dialyzer --plt

      - name: Run dialyzer
        run: mix dialyzer --format github

      - name: Check for unused deps
        run: mix deps.unlock --check-unused

      - name: Compile code
        run: mix compile --warnings-as-errors

      - name: Check code formatting
        run: mix format --check-formatted

      - name: Run Credo
        run: mix credo suggest --min-priority=normal

      - name: Run Sobelow
        run: mix sobelow

      - name: Run Migrations
        run: mix ecto.create && mix ecto.migrate

      - name: Run Tests
        run: MIX_ENV=test mix coveralls.json --warnings-as-errors

      - name: Check for compile-time dependencies
        run: mix xref graph --label compile-connected --fail-above 0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
